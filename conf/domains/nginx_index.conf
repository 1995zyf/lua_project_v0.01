# 设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1分钟没有被访问的内容自动清除，硬盘缓存空间大小为30GB
server {
    listen       8083;
    server_name  127.0.0.1;
    charset utf8;
    default_type text/html;
    index  index.html index.htm;
    access_log  /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/index_access.log;
    error_log /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/index_error.log error;

    #加载模板文件
    set $template_root "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/template/info";
    lua_code_cache off;
    # 2017TinywanInfo
    location /2017TinywanInfo {
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/controller/InfoController.lua";
    }

    location /index {
        content_by_lua_block{
            local helper = require 'vendor.helper'
            local array = helper.split('a,b,v,b',',')
            for key,value in ipairs(array)
            do
              ngx.say(key, value)
            end
            ngx.say('==' .. array[1])
        }
    }

    #配置Nginx动静分离，定义的静态页面直接从Nginx发布目录读取。
    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$
    {
        root /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/template/info;
        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力
        expires      7d;
    }

    # dkjson 库使用
    location /dkjson_encode {
        content_by_lua_block{
            local dkjson = require 'vendor.dkjson'
            --lua对象到字符串
            local obj = {
                id = 110,
                name = "Tinywan",
                age = 24,
                is_male = false,
                hobby = {"film", "music", "read"}
            }
            local str = dkjson.encode(obj, {indent = true})
            ngx.say(str, "<br/>")
        }
    }

    # dkjson redis share 使用
    location /dkjson_decode_redis {
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/controller/RedisController.lua";
    }

    # dkjson redis share 使用
    location /dkjson_decode_redis2 {
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/controller/ProductController.lua";
    }

   # dkjson 库使用
   location /redis {
       content_by_lua_block{
            local redis = require "resty.redis_iresty"
            local red = redis:new()

            local res, err = red:auth("tinywan123456")
            if not res then
                ngx.say("failed to authenticate: ", err)
                return
            end

            local ok, err = red:set("tinywan123456", "NGINX-based OPenresty_short")
            if not ok then
                ngx.say("failed to set: ", err)
                return
            end
            ngx.say("set result: ", ok)
       }
   }
}
