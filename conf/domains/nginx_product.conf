#upstream
upstream item_http_upstream {
    server 192.168.1.1 max_fails=2 fail_timeout=30s weight=5;
    server 192.168.1.2 max_fails=2 fail_timeout=30s weight=5;
}

#缓存
lua_shared_dict item_local_shop_cache 600m;

# server product
server {
    listen       8082;
    server_name  127.0.0.1;
    charset gbk;
    index  index.html index.htm index.phtm;
    access_log  /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/product_access.log;
    error_log /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/product_error.log error;

    #加载模板文件
    set $template_root "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/template/product";

    #url映射
    location ~* "^/product/(\d+)\.html$" {
        rewrite /product/(.*)    http://127.0.0.1:8082/$1 permanent;
    }

    # 项目的入口文件的调用
    location ~* "^/live/(\d{6,12})\.html$" {
        default_type text/html;
        set $skuId $1;
        lua_code_cache off;
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/controller/ProductController.lua";
    }

    # 产品列表 nginx proxy cache 使用
    location /2017TinywanInfo {
        # set $skuId $1;
        expires 3m;                         # 设置响应缓存头信息，此处是3分钟；将会得到Cache-Control:max-age=180和类似Expires:Sat, 28 Feb 2015 10:01:10 GMT的响应头
        proxy_cache cache_item;             # 使用名为cache_item的对应缓存配置
        proxy_cache_key $uri;               # 定义缓存唯一key,通过唯一key来进行hash存取，缓存key为uri，不包括host和参数，这样不管用户怎么通过在url上加随机数都是走缓存的
        #proxy_cache_bypass $item_dynamic;   # nginx不从缓存取响应的条件，可以写多个
        #proxy_no_cache $item_dynamic;       # nginx不将响应内容写入缓存的条件，可以写多个
        proxy_cache_valid 200 301 3m;       # 为不同的响应状态码设置不同的缓存时间，此处我们对200、301缓存3分钟
        proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504; # 什么情况下使用不新鲜（过期）的缓存内容
        proxy_pass_request_headers off;     # 我们不需要请求头，所以不传递
        proxy_set_header Host $host;    # 自定义http header头，用于发送给后端真实服务器
        #支持keep-alive
        proxy_http_version 1.1;         # 1.1和proxy_set_header Connection ""：支持keepalive
        proxy_set_header Connection "";
        proxy_pass http://127.0.0.1:8083;
        add_header X-Cache '$upstream_cache_status';        #添加是否缓存命中的响应头；比如命中HIT、不命中MISS、不走缓存BYPASS；比如命中会看到X-Cache：HIT响应头
    }

    # 清理缓存配置
    location /purge {
        allow     127.0.0.1;
        allow     192.168.1.0/16;
        deny      all;
        proxy_cache_purge  cache_item $arg_url;
    }

    # lua-resty-template test
    location /template_test {
       default_type 'text/html';
       content_by_lua '
            local template = require "resty.template"
            template.render("index2.html", { message = "Hello, World!" })
       ';
    }

    # 模板渲染 带有控制器数据的模板渲染
    location /template_test111 {
       default_type 'text/html';
       content_by_lua '
            local template = require "resty.template"
            template.render("index.html", { message = "Hello, World!" })
       ';
    }
}
