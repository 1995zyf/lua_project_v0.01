# the size depends on the number of servers in upstream {}:
lua_shared_dict healthcheck 1m;
lua_shared_dict ip_blacklist 1m;
#lua_socket_log_errors off;
server {
    listen       8080;
    server_name  localhost;
    index  index.html index.htm;
    access_log  /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/demo_access.log;
    error_log /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/demo_error.log error;

    set $web_root /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/public/websocket;
    set $project_path /mnt/hgfs/Linux-Share/Lua/;  # 定义项目根目录，如项目放在/home/www/
    location / {
        root $web_root/public;
    }

    # cjson  decode 失败，500 错误直接退
    location /cjson_decode_pcall {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/demo/cjson.lua";
        #content_by_lua_file "/home/www/lua_project_v0.01/application/demo/cjson.lua";
    }

    #test_ip_location
    location /test_ip_location {
        resolver 8.8.8.8; # dns
        default_type "text/plain";
        content_by_lua_file "${project_path}lua_project_v0.01/application/demo/ip_location.lua";
        #content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/demo/ip_location.lua";
    }

    # redis option
    location /get_redis_iresty {
        default_type 'text/html';
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/get_redis_iresty.lua";
    }

    #  test_redis_long
    location /test_redis_short {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/test_short.lua";
    }

    #  test_redis_long
    location /test_redis_long {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/test_long.lua";
    }

    #  redis_iresty_short.lua
    location /redis_iresty_short {
        default_type 'text/html';
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/redis/redis_iresty_short.lua";
    }

    #  test_redis_long
    location /redis_iresty_long {
        default_type 'text/html';
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/redis/redis_iresty_long.lua";
    }

    # shell
    location /shell_test {
      content_by_lua_block {
        local shell = require("resty.shell")
        local args = {
                socket = "unix:/tmp/shell.sock",
            }
            -- local status, out, err = shell.execute("cat /proc/cpuinfo", args)
            ngx.header.content_type = "text/plain"
            ngx.say("Hello from:\n" .. out)
        }
   }

   # shell
   location /shell_websocket {
      content_by_lua_block {
        local shell = require("resty.shell")
        local args = {
                socket = "unix:/tmp/shell.sock",
            }
            local status, out, err = shell.execute("nohup websocketd --port=8082 /home/tinywan/Go/count.sh 2>&1 &", args)
            ngx.header.content_type = "text/plain"
            ngx.say("Hello from:\n")
        }
   }

   #ngx_timer_at
   location /ngx_timer_at {
        default_type 'text/html';
        content_by_lua_file /home/tinywan/Openresty_Protect/First_Protect/lua/get_timer_at.lua;
    }

   # websocket系统负载统计
   location =/vmstats {
        default_type text/html;
        content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/websocket_server.lua;
   }

   # lua-resty-websocket 官方测试案例
   location /lua_websocket_server {
       default_type text/html;
       content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/lua_websocket_server.lua;
   }

    # mysql 官方测试案例
    location /mysql_server {
      default_type text/html;
      content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/mysql/mysql.lua;
    }

    location /mysql_fun {
      default_type text/html;
      content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/mysql/mysql_fun.lua;
    }

    location /mysql_fun_test {
      default_type text/html;
      content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/mysql/mysql_fun_test.lua;
    }

    # ngx_re_match 官方测试案例
    location /ngx_re_match {
      default_type text/html;
      content_by_lua_block {
          local m, err = ngx.re.match("/live/4001493201083111111.m3u8", "[0-9]+")
           if m then
               -- m[0] == "1234"
               ngx.say("makcj::",m[0])
           else
               if err then
                   ngx.log(ngx.ERR, "error: ", err)
                   return
               end
               ngx.say("match not found")
           end
      }
    }

    #test_mysql
    location /test_mysql {
        resolver 8.8.8.8; # dns;
        default_type "text/plain";
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/mysql/mysql.lua";
    }

    # os.execute 测试 标准os库
    location /os_execute {
      content_by_lua_block {
        --文件重命名
        local ret = os.rename("/home/tinywan/shell/123TEST", "/home/tinywan/shell/123TEST_rename")
        ngx.say(ret)
        -- 删除一个文件
        local ret = os.remove("/home/tinywan/shell/tinywan123.sh")
        ngx.say(ret)
        local ret = os.execute("mkdir /home/tinywan/shell/123TEST_execute")
        ngx.say(ret)
      }
   }
}

