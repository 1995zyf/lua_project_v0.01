# the size depends on the number of servers in upstream {}:
lua_shared_dict healthcheck 1m;
lua_shared_dict ip_blacklist 1m;
lua_socket_log_errors off;

error_log /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/logs/error.log error;

server {
    listen       80;
    server_name  localhost;
	
    location / {
     
    }
    
    location /ipLocation {
        resolver 8.8.8.8; # 如果要使用api的话 需要dns 这可以改成中国的会快一些
        default_type "text/plain";
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/ip_location.lua";
    }
	
    location /lua_get_redis {
        default_type 'text/html';
        lua_code_cache off;
        content_by_lua_file /mnt/hgfs/Linux-Share/Lua/Lua_project_v.01/application/get_redis.lua;
    }

    location /get_redis_iresty {
        default_type 'text/html';
        lua_code_cache off;
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/get_redis_iresty.lua";
    }

    location /get_main {
        default_type 'text/html';
        lua_code_cache off;
        content_by_lua_file /home/tinywan/Openresty_Protect/First_Protect/lua/main.lua;
    }
    
    location /ip_blacklist {
        default_type 'text/html';
        lua_code_cache off;
        content_by_lua_file /home/tinywan/Openresty_Protect/First_Protect/lua/ip_blacklist.lua;
    }


    # shell
    location /shell_test {
      content_by_lua_block {
        local shell = require("resty.shell")

	local args = {
            socket = "unix:/tmp/shell.sock",
        }

        local status, out, err = shell.execute("cat /proc/cpuinfo", args)

        ngx.header.content_type = "text/plain"
        ngx.say("Hello from:\n" .. out)
    }
   }

   location /ngx_timer_at {
        default_type 'text/html';
        lua_code_cache off;
        content_by_lua_file /home/tinywan/Openresty_Protect/First_Protect/lua/get_timer_at.lua;
    }
}


